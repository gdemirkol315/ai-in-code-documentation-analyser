{
  "best-example": {
    "description": "Example of documentation that scores 5 on all metrics (Completeness, Comprehensibility, Alignment)",
    "code": "public UserProfile getUserProfile(String userId) {\n    if (userId == null || userId.isEmpty()) {\n        throw new IllegalArgumentException(\"User ID must not be null or empty\");\n    }\n    try {\n        return database.findUserById(userId);\n    } catch (SQLException e) {\n        throw new DatabaseException(\"Failed to retrieve user\", e);\n    }\n}",
    "documentation": "/**\n * Retrieves a user's profile based on the given user ID.\n *\n * @param userId the unique identifier of the user\n * @return the user's profile as a {@link UserProfile} object, or {@code null} if not found\n * @throws IllegalArgumentException if {@code userId} is null or empty\n * @throws DatabaseException if a database error occurs during retrieval\n */"
  },
  "worst-example": {
    "description": "Example of documentation that scores 1 on all metrics (Completeness, Comprehensibility, Alignment)",
    "code": "public UserProfile getUserProfile(String userId) {\n    if (userId == null || userId.isEmpty()) {\n        throw new IllegalArgumentException(\"User ID must not be null or empty\");\n    }\n    try {\n        return database.findUserById(userId);\n    } catch (SQLException e) {\n        throw new DatabaseException(\"Failed to retrieve user\", e);\n    }\n}",
    "documentation": "/**\n * Gets user.\n */"
  },
  "metrics": [
    {
      "name": "Completeness",
      "description": "Measures how thoroughly the documentation covers all aspects of the method",
      "guidelines": {
        "1": "Missing most essential information (parameters, return values, description)",
        "2": "Covers basic description but missing details on parameters or returns",
        "3": "Documents all parameters and returns but lacks exception handling or edge cases",
        "4": "Comprehensive coverage with minor possible improvement",
        "5": "Perfect documentation covering description, parameters, returns, exceptions, and edge cases"
      }
    },
    {
      "name": "Comprehensibility",
      "description": "Evaluates how clear and understandable the documentation is",
      "guidelines": {
        "1": "Confusing or misleading documentation",
        "2": "Unclear wording with ambiguous descriptions",
        "3": "Mostly clear but with some confusing elements",
        "4": "Clear and concise with minor improvements possible",
        "5": "Exceptionally clear, concise, and easy to understand"
      }
    },
    {
      "name": "Alignment",
      "description": "Measures how well the documentation aligns with the actual code",
      "guidelines": {
        "1": "Documentation contradicts or misrepresents the code",
        "2": "Documentation partially aligns with code but has significant discrepancies",
        "3": "Documentation mostly aligns with code but has minor discrepancies",
        "4": "Documentation accurately reflects code with very minor omissions",
        "5": "Documentation perfectly aligns with code, including edge cases and special conditions"
      }
    }
  ]
}
